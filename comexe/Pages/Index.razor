@page "/"
@using SharpCompress.Archives.Rar
@using System.Collections.ObjectModel
@using System.Reflection
@using SharpCompress.Archives.Zip


<h1>Comic Book Reader</h1>
<InputFile OnChange="@LoadFiles" accept=".cbr,.cbz,.rar,.zip"/>
<hr />
@if (readReady && initialized)
{
<button @onclick="FirstPage">
First Page
</button>
<button @onclick="PrevPage">
Previous Page
</button>
<button @onclick="NextPage">
Next Page
</button>
<button @onclick="LastPage">
Last Page
</button>
@*<button @onclick="Collect">Add to Collection</button>
*@
<p>Page Number @pageNumber of @lastPage</p>
    
    if (@imageURL != "")
    {
        <img style="height:100%;width:100%;" src="@imageURL">
    }
}
@if (loading)
{
    <p>Loading...</p>
}

@code {
    string imageURL = "";
    string fileName = "";
    Stream file;
    List<ZipArchiveEntry> zipEntries;
    List<RarArchiveEntry> rarEntries;
    int currentPage = 0;
    int lastPageIndex = 0;
    int pageNumber = 0;
    int lastPage = 0;
    bool loading = false;
    bool initialized = false;
    string currentPath = "";
    bool readReady = false;


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        loading = true;
        readReady = false;
        initialized = false;
        fileName = e.File.Name;
        file = e.File.OpenReadStream(92865494000);
        string tempFile = Path.GetTempFileName();
        using (Stream fileStream = File.OpenWrite(tempFile))
        {
            await file.CopyToAsync(fileStream);
            file.Close();
            fileStream.Close();
        }
        currentPath = tempFile;
        readReady = true;
        await Initialize();
        await FirstPage();
        loading = false;
    }


    private async Task FirstPage()
    {
        if (readReady && initialized)
        {
            if (fileName.Last() == 'z' || fileName.Last() == 'p')
            {
                var entry = zipEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).First();
                await StreamImage(entry);
            }
            if (fileName.Last() == 'r')
            {
                var entry = rarEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).First();
                await StreamImage(entry);
            }
            currentPage = 0;
            pageNumber = 1;
        }

    }

    private async Task LastPage()
    {
        if (readReady && initialized)
        {
            if (fileName.Last() == 'z' || fileName.Last() == 'p')
            {
                var entry = zipEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).Last();
                await StreamImage(entry);
                pageNumber = zipEntries.Count();
            }
            if (fileName.Last() == 'r')
            {
                var entry = rarEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).Last();
                await StreamImage(entry);
                pageNumber = rarEntries.Count();
            }
            currentPage = pageNumber - 1;
        }

    }

    private async Task NextPage()
    {
        if (readReady && initialized && currentPage != lastPageIndex)
        {
            try
            {
                if (fileName.Last() == 'z' || fileName.Last() == 'p')
                {
                    var entry = zipEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).ElementAt(currentPage + 1);
                    await StreamImage(entry);
                }
                if (fileName.Last() == 'r')
                {
                    var entry = rarEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).ElementAt(currentPage + 1);
                    await StreamImage(entry);
                }

                pageNumber++;
                currentPage = currentPage + 1;
            }
            catch
            {
                await LastPage();
            }
        }

    }

    private async Task PrevPage()
    {
        if (readReady && initialized && currentPage != 0)
        {
            try
            {
                if (fileName.Last() == 'z' || fileName.Last() == 'p')
                {
                    var entry = zipEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).ElementAt(currentPage - 1);
                    await StreamImage(entry);
                }
                if (fileName.Last() == 'r')
                {
                    var entry = rarEntries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).ElementAt(currentPage - 1);
                    await StreamImage(entry);
                }

                pageNumber--;
                currentPage = currentPage - 1;
            }
            catch
            {
                await FirstPage();
            }

        }

    }

    private async Task Initialize()
    {
        if (!initialized)
        {
            if (fileName.Last() == 'z' || fileName.Last() == 'p')
            {
                var archive = ZipArchive.Open(currentPath);
                zipEntries = archive.Entries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).ToList();
                lastPage = archive.Entries.Where(entry => !entry.IsDirectory).Count();
            }
            if (fileName.Last() == 'r')
            {
                var archive = RarArchive.Open(currentPath);
                rarEntries = archive.Entries.Where(entry => !entry.IsDirectory).OrderBy(x=>x.Key).ToList();
                lastPage = archive.Entries.Where(entry => !entry.IsDirectory).Count();
            }
            lastPageIndex = lastPageIndex - 1;
            initialized = true;
        }
    }

    //Can we use entry.key to catch filetype & print out txt or doc(hard?)?
    //Add epub reader functionality as well?
    private async Task StreamImage(RarArchiveEntry entry)
    {
        var stream = entry.OpenEntryStream();
        MemoryStream ms = new MemoryStream();
        stream.CopyTo(ms);
        byte[] byteArray = ms.ToArray();
        var b64String = Convert.ToBase64String(byteArray);
        imageURL = "data:image/png;base64," + b64String;
    }

        private async Task StreamImage(ZipArchiveEntry entry)
    {
        var stream = entry.OpenEntryStream();
        MemoryStream ms = new MemoryStream();
        stream.CopyTo(ms);
        byte[] byteArray = ms.ToArray();
        var b64String = Convert.ToBase64String(byteArray);
        imageURL = "data:image/png;base64," + b64String;
    }
}